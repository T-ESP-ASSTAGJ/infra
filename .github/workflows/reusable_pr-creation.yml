name: üöÄ Auto PR Creation (Reusable)

on:
  workflow_call:
    inputs:
      repository_name:
        required: true
        type: string
        description: "Name of the repository (infra, client, api)"
      base_branch:
        required: false
        type: string
        default: "staging"
        description: "Base branch for PR creation"
      reviewers:
        required: false
        type: string
        description: "Comma-separated list of reviewers"
      team_reviewers:
        required: false
        type: string
        description: "Comma-separated list of team reviewers"
    secrets:
      AUTO_DEPLOY_TOKEN:
        required: true
        description: "GitHub token with push/PR permissions"

jobs:
  create-feature-pr:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/staging' && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.AUTO_DEPLOY_TOKEN }}

      - name: Check for gitmoji in latest commit
        id: gitmoji_check
        run: |
          COMMIT_MSG=$(git log -1 --format="%s")
          echo "Latest commit: $COMMIT_MSG"
          
          # Check for gitmoji patterns (emoji or :text: format)
          if [[ "$COMMIT_MSG" =~ (üöë|:ambulance:|‚ú®|:sparkles:|üêõ|:bug:|üöÄ|:rocket:|‚ôªÔ∏è|:recycle:|üé®|:art:|üíÑ|:lipstick:|‚ö°|:zap:|üîß|:wrench:|üìù|:memo:|üî•|:fire:|üíö|:green_heart:|‚¨ÜÔ∏è|:arrow_up:|‚¨áÔ∏è|:arrow_down:|üìå|:pushpin:|üë∑|:construction_worker:|üìà|:chart_with_upwards_trend:|üî®|:hammer:|üéâ|:tada:|üîí|:lock:|üîê|:closed_lock_with_key:|üîë|:key:|üèóÔ∏è|:building_construction:|üì¶|:package:|üîñ|:bookmark:|üö®|:rotating_light:|üí°|:bulb:|üçª|:beers:|üí¨|:speech_balloon:|üóÉÔ∏è|:card_file_box:|üîä|:loud_sound:|üîá|:mute:|üë•|:busts_in_silhouette:|üö∏|:children_crossing:|üì±|:iphone:|ü§°|:clown_face:|ü•Ö|:goal_net:|üì∏|:camera_flash:|‚öóÔ∏è|:alembic:|üîç|:mag:|üè∑Ô∏è|:label:|üå±|:seedling:|üö©|:triangular_flag_on_post:|üí´|:dizzy:|üóëÔ∏è|:wastebasket:|üõÇ|:passport_control:|ü©π|:adhesive_bandage:|üßê|:monocle_face:|‚ö∞Ô∏è|:coffin:|üß™|:test_tube:|üëî|:necktie:|ü©∫|:stethoscope:|üß±|:bricks:|üßë‚Äçüíª|:technologist:|üí∏|:money_with_wings:|üßµ|:thread:|ü¶∫|:safety_vest:) ]]; then
            echo "has_gitmoji=true" >> $GITHUB_OUTPUT
          
            # Determine priority based on gitmoji
            if [[ "$COMMIT_MSG" =~ (üöë|:ambulance:) ]]; then
              echo "priority=critical" >> $GITHUB_OUTPUT
            else
              echo "priority=normal" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_gitmoji=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Set repository-specific configurations
        id: repo_config
        run: |
          REPO_NAME="${{ inputs.repository_name }}"
          
          case "$REPO_NAME" in
            "infra")
              echo "emoji=üèóÔ∏è" >> $GITHUB_OUTPUT
              echo "context=Infrastructure" >> $GITHUB_OUTPUT
              ;;
            "client")
              echo "emoji=üñ•Ô∏è" >> $GITHUB_OUTPUT
              echo "context=Frontend" >> $GITHUB_OUTPUT
              ;;
            "api")
              echo "emoji=üîå" >> $GITHUB_OUTPUT
              echo "context=Backend API" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "emoji=üîÄ" >> $GITHUB_OUTPUT
              echo "context=Code" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Check if PR already exists
        id: check_pr
        if: steps.gitmoji_check.outputs.has_gitmoji == 'true'
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          BASE_BRANCH="${{ inputs.base_branch }}"
          
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head "$BRANCH_NAME" --base "$BASE_BRANCH" --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [[ -n "$EXISTING_PR" && "$EXISTING_PR" != "null" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è PR already exists: #$EXISTING_PR"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "üöÄ Will create new PR"
          fi
        env:
          GH_TOKEN: ${{ secrets.AUTO_DEPLOY_TOKEN }}

      - name: Create Pull Request
        if: steps.gitmoji_check.outputs.has_gitmoji == 'true' && steps.check_pr.outputs.exists == 'false'
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          BASE_BRANCH="${{ inputs.base_branch }}"
          REPO_EMOJI="${{ steps.repo_config.outputs.emoji }}"
          REPO_CONTEXT="${{ steps.repo_config.outputs.context }}"
          PRIORITY="${{ steps.gitmoji_check.outputs.priority }}"
          COMMIT_MSG=$(git log -1 --format="%s")
          
          # Determine title based on priority
          if [[ "$PRIORITY" == "critical" ]]; then
            PR_TITLE="üöë HOTFIX: $BRANCH_NAME - $REPO_CONTEXT"
          else
            PR_TITLE="$REPO_EMOJI $BRANCH_NAME - $REPO_CONTEXT"
          fi
          
          # Build PR body using jq to handle proper escaping
          PR_BODY=$(jq -nr \
            --arg emoji "$REPO_EMOJI" \
            --arg context "$REPO_CONTEXT" \
            --arg priority "$PRIORITY" \
            --arg repo "${{ inputs.repository_name }}" \
            --arg ticket "$BRANCH_NAME" \
            --arg commit "$COMMIT_MSG" \
            '
            "## " + $emoji + " " + 
            (if $priority == "critical" then "üö® Critical Hotfix" else $context + " Ready for Review" end) + "\n\n" +
            "**Repository**: `" + $repo + "`\n" +
            "**Ticket**: " + $ticket + "\n" +
            (if $priority == "critical" then "**Priority**: Critical - Requires immediate review\n\n" else "\n" end) +
            "### üìã Changes\n```\n" + $commit + "\n```\n\n" +
            "\n\n" +
            "---\n" +
            "ü§ñ *Auto-created from gitmoji commit in `" + $repo + "` repository*"
          ')
          
          # Ensure required labels exist (create if missing)
          REQUIRED_LABELS=("feature:0075ca:New feature or enhancement" "hotfix:d73a49:Critical fix requiring immediate attention" "automated-pr:7057ff:Automatically created pull request")
          
          for label_info in "${REQUIRED_LABELS[@]}"; do
            IFS=':' read -r label_name label_color label_desc <<< "$label_info"
            gh label create "$label_name" --color "$label_color" --description "$label_desc" 2>/dev/null || true
          done
          
          # Also create repository and ticket labels if they don't exist
          gh label create "${{ inputs.repository_name }}" --color "6c757d" --description "${{ inputs.repository_name }} repository" 2>/dev/null || true
          gh label create "$BRANCH_NAME" --color "ffc107" --description "Ticket $BRANCH_NAME" 2>/dev/null || true
          
          # Build labels array
          LABELS=$(jq -nc \
            --arg priority "$PRIORITY" \
            --arg repo "${{ inputs.repository_name }}" \
            --arg ticket "$BRANCH_NAME" \
            '[
              (if $priority == "critical" then "hotfix" else "feature" end),
              "automated-pr",
              $repo,
              $ticket
            ]'
          )
          
          # Build reviewers array if provided
          REVIEWERS_ARG=""
          if [[ -n "${{ inputs.reviewers }}" ]]; then
            REVIEWERS=$(echo "${{ inputs.reviewers }}" | jq -R 'split(",") | map(. | gsub("^\\s+|\\s+$"; ""))')
            REVIEWERS_ARG="--reviewer $(echo "$REVIEWERS" | jq -r '.[]' | tr '\n' ',' | sed 's/,$//')"
          fi
          
          TEAM_REVIEWERS_ARG=""
          if [[ -n "${{ inputs.team_reviewers }}" ]]; then
            TEAM_REVIEWERS=$(echo "${{ inputs.team_reviewers }}" | jq -R 'split(",") | map(. | gsub("^\\s+|\\s+$"; ""))')
            TEAM_REVIEWERS_ARG="--reviewer $(echo "$TEAM_REVIEWERS" | jq -r '.[]' | tr '\n' ',' | sed 's/,$//')"
          fi
          
          # Create the PR
          gh pr create \
            --title "$PR_TITLE" \
            --body "$PR_BODY" \
            --base "$BASE_BRANCH" \
            --head "$BRANCH_NAME" \
            $(echo "$LABELS" | jq -r '.[] | "--label " + .' | tr '\n' ' ') \
            $([ "$PRIORITY" != "critical" ] && echo "--draft") \
            $REVIEWERS_ARG \
            $TEAM_REVIEWERS_ARG
          
          echo "‚úÖ PR created successfully"
        env:
          GH_TOKEN: ${{ secrets.AUTO_DEPLOY_TOKEN }}

      - name: Skip if PR exists
        if: steps.gitmoji_check.outputs.has_gitmoji == 'true' && steps.check_pr.outputs.exists == 'true'
        run: |
          echo "‚ÑπÔ∏è PR already exists (#${{ steps.check_pr.outputs.pr_number }}), skipping creation"

      - name: Comment if no gitmoji
        if: steps.gitmoji_check.outputs.has_gitmoji == 'false'
        run: |
          echo "‚ÑπÔ∏è  No gitmoji found in commit message. Skipping PR creation."
          echo "üí° Use gitmoji in your commit messages to auto-create PRs!"
          echo "üìñ Learn more: https://gitmoji.dev"
          echo "üèóÔ∏è Repository: ${{ inputs.repository_name }}"