name: 🚀 Auto PR Creation (Reusable)

on:
  workflow_call:
    inputs:
      repository_name:
        required: true
        type: string
        description: "Name of the repository (infra, client, api)"
      base_branch:
        required: false
        type: string
        default: "staging"
        description: "Base branch for PR creation"
      reviewers:
        required: false
        type: string
        description: "Comma-separated list of reviewers"
      team_reviewers:
        required: false
        type: string
        description: "Comma-separated list of team reviewers"
    secrets:
      AUTO_DEPLOY_TOKEN:
        required: true
        description: "GitHub token with push/PR permissions"

jobs:
  create-feature-pr:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/staging' && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/master'

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.AUTO_DEPLOY_TOKEN }}

      - name: Check for gitmoji in latest commit
        id: gitmoji_check
        run: |
          COMMIT_MSG=$(git log -1 --format="%s")
          echo "Latest commit: $COMMIT_MSG"
          
          # Check for gitmoji patterns (emoji or :text: format)
          if [[ "$COMMIT_MSG" =~ (🚑|:ambulance:|✨|:sparkles:|🐛|:bug:|🚀|:rocket:|♻️|:recycle:|🎨|:art:|💄|:lipstick:|⚡|:zap:|🔧|:wrench:|📝|:memo:|🔥|:fire:|💚|:green_heart:|⬆️|:arrow_up:|⬇️|:arrow_down:|📌|:pushpin:|👷|:construction_worker:|📈|:chart_with_upwards_trend:|🔨|:hammer:|🎉|:tada:|🔒|:lock:|🔐|:closed_lock_with_key:|🔑|:key:|🏗️|:building_construction:|📦|:package:|🔖|:bookmark:|🚨|:rotating_light:|💡|:bulb:|🍻|:beers:|💬|:speech_balloon:|🗃️|:card_file_box:|🔊|:loud_sound:|🔇|:mute:|👥|:busts_in_silhouette:|🚸|:children_crossing:|📱|:iphone:|🤡|:clown_face:|🥅|:goal_net:|📸|:camera_flash:|⚗️|:alembic:|🔍|:mag:|🏷️|:label:|🌱|:seedling:|🚩|:triangular_flag_on_post:|💫|:dizzy:|🗑️|:wastebasket:|🛂|:passport_control:|🩹|:adhesive_bandage:|🧐|:monocle_face:|⚰️|:coffin:|🧪|:test_tube:|👔|:necktie:|🩺|:stethoscope:|🧱|:bricks:|🧑‍💻|:technologist:|💸|:money_with_wings:|🧵|:thread:|🦺|:safety_vest:) ]]; then
            echo "has_gitmoji=true" >> $GITHUB_OUTPUT
          
            # Determine priority based on gitmoji
            if [[ "$COMMIT_MSG" =~ (🚑|:ambulance:) ]]; then
              echo "priority=critical" >> $GITHUB_OUTPUT
            else
              echo "priority=normal" >> $GITHUB_OUTPUT
            fi
          else
            echo "has_gitmoji=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      - name: Set repository-specific configurations
        id: repo_config
        run: |
          REPO_NAME="${{ inputs.repository_name }}"
          
          case "$REPO_NAME" in
            "infra")
              echo "emoji=🏗️" >> $GITHUB_OUTPUT
              echo "context=Infrastructure" >> $GITHUB_OUTPUT
              ;;
            "client")
              echo "emoji=🖥️" >> $GITHUB_OUTPUT
              echo "context=Frontend" >> $GITHUB_OUTPUT
              ;;
            "api")
              echo "emoji=🔌" >> $GITHUB_OUTPUT
              echo "context=Backend API" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "emoji=🔀" >> $GITHUB_OUTPUT
              echo "context=Code" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Check if PR already exists
        id: check_pr
        if: steps.gitmoji_check.outputs.has_gitmoji == 'true'
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          BASE_BRANCH="${{ inputs.base_branch }}"
          
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --head "$BRANCH_NAME" --base "$BASE_BRANCH" --json number --jq '.[0].number' 2>/dev/null || echo "")
          
          if [[ -n "$EXISTING_PR" && "$EXISTING_PR" != "null" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "ℹ️ PR already exists: #$EXISTING_PR"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "🚀 Will create new PR"
          fi
        env:
          GH_TOKEN: ${{ secrets.AUTO_DEPLOY_TOKEN }}

      - name: Create Pull Request
        if: steps.gitmoji_check.outputs.has_gitmoji == 'true' && steps.check_pr.outputs.exists == 'false'
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          BASE_BRANCH="${{ inputs.base_branch }}"
          REPO_EMOJI="${{ steps.repo_config.outputs.emoji }}"
          REPO_CONTEXT="${{ steps.repo_config.outputs.context }}"
          PRIORITY="${{ steps.gitmoji_check.outputs.priority }}"
          COMMIT_MSG=$(git log -1 --format="%s")
          
          # Determine title based on priority
          if [[ "$PRIORITY" == "critical" ]]; then
            PR_TITLE="🚑 HOTFIX: $BRANCH_NAME - $REPO_CONTEXT"
          else
            PR_TITLE="$REPO_EMOJI $BRANCH_NAME - $REPO_CONTEXT"
          fi
          
          # Create PR body
          PR_BODY="## $REPO_EMOJI $([ "$PRIORITY" == "critical" ] && echo "🚨 Critical Hotfix" || echo "$REPO_CONTEXT Ready for Review")
          **Repository**: \`${{ inputs.repository_name }}\`
          **Ticket**: $BRANCH_NAME
          $([ "$PRIORITY" == "critical" ] && echo "**Priority**: Critical - Requires immediate review")
          ### 📋 Changes
          \`\`\`
          $COMMIT_MSG
          \`\`\`  
          
          ### 📊 Repository Context
          This PR affects the **$REPO_CONTEXT** components of the system.
          ---
          🤖 *Auto-created from gitmoji commit in \`${{ inputs.repository_name }}\` repository*"
          # Build gh pr create command
          GH_COMMAND="gh pr create --title \"$PR_TITLE\" --body \"$PR_BODY\" --base \"$BASE_BRANCH\" --head \"$BRANCH_NAME\""
          # Add labels
          if [[ "$PRIORITY" == "critical" ]]; then
          GH_COMMAND="$GH_COMMAND --label hotfix"
          else
          GH_COMMAND="$GH_COMMAND --label feature"
          fi
          GH_COMMAND="$GH_COMMAND --label automated-pr --label ${{ inputs.repository_name }} --label $BRANCH_NAME"
          
          # Add draft flag for non-critical PRs
          if [[ "$PRIORITY" != "critical" ]]; then
          GH_COMMAND="$GH_COMMAND --draft"
          fi
          
          # Add reviewers if specified
          if [[ -n "${{ inputs.reviewers }}" ]]; then
          # Split comma-separated reviewers and add each one
          IFS=',' read -ra REVIEWERS <<< "${{ inputs.reviewers }}"
          for reviewer in "${REVIEWERS[@]}"; do
          reviewer=$(echo "$reviewer" | xargs) # trim whitespace
          GH_COMMAND="$GH_COMMAND --reviewer \"$reviewer\""
          done
          fi
          
          if [[ -n "${{ inputs.team_reviewers }}" ]]; then
          # Split comma-separated team reviewers and add each one
          IFS=',' read -ra TEAM_REVIEWERS <<< "${{ inputs.team_reviewers }}"
          for team_reviewer in "${TEAM_REVIEWERS[@]}"; do
          team_reviewer=$(echo "$team_reviewer" | xargs) # trim whitespace
          GH_COMMAND="$GH_COMMAND --reviewer \"$team_reviewer\""
          done
          fi
          
          # Execute the command
          eval "$GH_COMMAND"
          
          echo "✅ PR created successfully"
        env:
          GH_TOKEN: ${{ secrets.AUTO_DEPLOY_TOKEN }}

      - name: Skip if PR exists
        if: steps.gitmoji_check.outputs.has_gitmoji == 'true' && steps.check_pr.outputs.exists == 'true'
        run: |
          echo "ℹ️ PR already exists (#${{ steps.check_pr.outputs.pr_number }}), skipping creation"

      - name: Comment if no gitmoji
        if: steps.gitmoji_check.outputs.has_gitmoji == 'false'
        run: |
          echo "ℹ️  No gitmoji found in commit message. Skipping PR creation."
          echo "💡 Use gitmoji in your commit messages to auto-create PRs!"
          echo "📖 Learn more: https://gitmoji.dev"
          echo "🏗️ Repository: ${{ inputs.repository_name }}"