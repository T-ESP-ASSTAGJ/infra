name: 📊 Infrastructure Status

on:
  schedule:
    - cron: '0 */4 * * *'
  workflow_dispatch:

env:
  TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
  TF_VAR_spaces_access_id: ${{ secrets.SPACES_ACCESS_ID }}
  TF_VAR_spaces_secret_key: ${{ secrets.SPACES_SECRET_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_KEY }}
  AWS_EC2_METADATA_DISABLED: true
  GITHUB_TOKEN: ${{ secrets.AUTO_DEPLOY_TOKEN }}

jobs:
  check-status:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        environment: [staging, production]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.8.5

      - name: Check Status
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          echo "🔍 Checking ${{ matrix.environment }} status..."
          tofu init
          
          if tofu show -json > state.json 2>/dev/null; then
            DROPLETS=$(jq -r '[.values.root_module.child_modules[]?.resources[]? | select(.type == "digitalocean_droplet")] | length' state.json)
            PROJECT=$(jq -r '[.values.root_module.child_modules[]?.resources[]? | select(.type == "digitalocean_project")] | .[0].values.name // "None"' state.json)
          
            if [[ $DROPLETS -gt 0 ]]; then
              echo "✅ ${{ matrix.environment }}: $DROPLETS VMs online"
              echo "📋 Project: $PROJECT"
            else
              echo "🟡 ${{ matrix.environment }}: Project exists, no VMs"
            fi
          else
            echo "🔴 ${{ matrix.environment }}: No infrastructure"
          fi

      - name: Create Status Badge
        if: vars.BADGE_GIST_ID != ''
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          if tofu show -json > state.json 2>/dev/null; then
            DROPLETS=$(jq -r '[.values.root_module.child_modules[]?.resources[]? | select(.type == "digitalocean_droplet")] | length' state.json)
            if [[ $DROPLETS -gt 0 ]]; then
              COLOR="brightgreen"
              MESSAGE="${DROPLETS} VMs"
            else
              COLOR="yellow"
              MESSAGE="no VMs"
            fi
          else
            COLOR="red"
            MESSAGE="offline"
          fi
          
          # Create properly escaped JSON
          cat > badge_payload.json << EOF
          {
            "files": {
              "infra-${{ matrix.environment }}.json": {
                "content": "{\"schemaVersion\": 1, \"label\": \"${{ matrix.environment }}\", \"message\": \"${MESSAGE}\", \"color\": \"${COLOR}\"}"
              }
            }
          }
          EOF
          
          # Update badge via GitHub API
          curl -X PATCH \
            -H "Authorization: Bearer ${{ vars.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://api.github.com/gists/${{ vars.BADGE_GIST_ID }}" \
            -d @badge_payload.json