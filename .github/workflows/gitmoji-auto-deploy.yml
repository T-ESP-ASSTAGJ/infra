name: üéØ Gitmoji Auto Deploy

on:
  workflow_call:
    inputs:
      repository_name:
        required: true
        type: string
        description: "Name of the repository (api, client, etc.)"
    secrets:
      AUTO_DEPLOY_TOKEN:
        required: true
        description: "GitHub token with push/PR permissions"

jobs:
  auto-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.AUTO_DEPLOY_TOKEN }}

      - name: Validate branch and deploy
        env:
          GH_TOKEN: ${{ secrets.AUTO_DEPLOY_TOKEN }}
        run: |
          COMMIT_MSG=$(git log -1 --format="%s")
          BRANCH=${GITHUB_REF#refs/heads/}
          
          echo "üîç Analyzing commit: $COMMIT_MSG"
          echo "üìç Branch: $BRANCH"
          echo "üì¶ Repository: ${{ inputs.repository_name }}"
          
          # Validate branch name pattern TEM-XXX
          if [[ ! "$BRANCH" =~ ^TEM-[0-9]+$ ]]; then
            echo "‚ö†Ô∏è Branch name doesn't match TEM pattern: $BRANCH"
            echo "‚ÑπÔ∏è Only TEM-XXX branches are processed for auto-deploy"
            exit 0
          fi
          
          echo "‚úÖ Branch $BRANCH matches TEM pattern"
          
          # :ambulance: = create PR to staging AND main
          if [[ "$COMMIT_MSG" =~ :ambulance: ]]; then
            echo "üöë Critical hotfix detected - creating PRs to staging AND main"
          
            # Create PR to staging
            if ! gh pr list --head "$BRANCH" --base staging | grep -q "$BRANCH"; then
              gh pr create \
                --title "üöë HOTFIX: $COMMIT_MSG" \
                --body "üö® **CRITICAL HOTFIX** üö®

  ü§ñ Auto-created from critical commit in ${{ inputs.repository_name }}
  
  ‚ö†Ô∏è **This is a critical hotfix that requires immediate attention**

  **Original commit:** $COMMIT_MSG
  **Branch:** $BRANCH
  **Repository:** ${{ inputs.repository_name }}" \
  --base staging \
  --head "$BRANCH" \
  --label "hotfix" \
  --label "critical"
  echo "‚úÖ Critical PR created to staging"
  fi
  
  # Create PR to main
  if ! gh pr list --head "$BRANCH" --base main | grep -q "$BRANCH"; then
  gh pr create \
--title "üöë CRITICAL HOTFIX: $COMMIT_MSG" \
  --body "üö® **CRITICAL PRODUCTION HOTFIX** üö®
  
  ü§ñ Auto-created from critical commit in ${{ inputs.repository_name }}
  
  ‚ö†Ô∏è **This hotfix needs to be deployed to production immediately after validation**
  
  **Original commit:** $COMMIT_MSG
  **Branch:** $BRANCH
  **Repository:** ${{ inputs.repository_name }}
  
  üî• **URGENT REVIEW REQUIRED** üî•" \
  --base main \
  --head "$BRANCH" \
  --label "critical-hotfix" \
  --label "production"
  echo "‚úÖ Critical PR created to main"
  fi
  
  # Other gitmoji codes = create PR to staging
  elif [[ "$COMMIT_MSG" =~ (:sparkles:|:bug:|:rocket:|:recycle:|:art:|:lipstick:|:zap:|:wrench:) ]]; then
  echo "‚ú® Feature detected - creating PR to staging"
  
  # Check if PR already exists
  if ! gh pr list --head "$BRANCH" --base staging | grep -q "$BRANCH"; then
  gh pr create \
  --title "$COMMIT_MSG" \
  --body "ü§ñ Auto-created from gitmoji commit in ${{ inputs.repository_name }}" \
  --base staging \
  --head "$BRANCH" \
  --label "auto-deploy"
  echo "‚úÖ PR created to staging"
  else
  echo "‚ÑπÔ∏è PR already exists"
  fi
  
  else
  echo "‚ÑπÔ∏è No deployment action needed"
  fi