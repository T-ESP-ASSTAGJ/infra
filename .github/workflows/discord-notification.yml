name: üéâ Discord Notification

on:
  workflow_call:
    inputs:
      repository_name:
        required: true
        type: string
        description: "Name of the repository (api, client, infra)"
      target_branch:
        required: false
        type: string
        default: "main"
        description: "The branch that was pushed to (main, staging, etc.)"
    secrets:
      DISCORD_WEBHOOK_URL:
        required: true
        description: "Discord webhook URL for notifications"

jobs:
  discord-notification:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit and merge information
        id: git-info
        run: |
          # Get the latest commit info
          COMMIT_SHA=$(git rev-parse HEAD)
          SHORT_SHA=${COMMIT_SHA:0:7}
          COMMIT_MSG=$(git log -1 --format="%s")
          AUTHOR_NAME=$(git log -1 --format="%an")
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${COMMIT_SHA}"
          REPO_URL="https://github.com/${{ github.repository }}"
          
          # Check if this is a merge commit (has more than 1 parent)
          PARENT_COUNT=$(git cat-file -p HEAD | grep "^parent " | wc -l)
          
          if [[ $PARENT_COUNT -gt 1 ]]; then
            # This is a merge commit
            IS_MERGE="true"
            
            # Try to extract branch name from merge commit message
            # Pattern: "Merge pull request #123 from user/branch-name"
            MERGED_BRANCH=$(echo "$COMMIT_MSG" | sed -n 's/.*Merge pull request #[0-9]* from [^/]*\/\(.*\)/\1/p')
            
            # Alternative pattern: "Merge branch 'branch-name'"
            if [[ -z "$MERGED_BRANCH" ]]; then
              MERGED_BRANCH=$(echo "$COMMIT_MSG" | sed -n "s/.*Merge branch '\([^']*\)'.*/\1/p")
            fi
            
            # Another fallback pattern
            if [[ -z "$MERGED_BRANCH" ]]; then
              MERGED_BRANCH=$(echo "$COMMIT_MSG" | sed -n 's/.*from.*\/\([^[:space:]]*\).*/\1/p')
            fi
            
            # Final fallback
            if [[ -z "$MERGED_BRANCH" ]]; then
              MERGED_BRANCH="feature-branch"
            fi
            
            # Extract PR number if available
            PR_NUMBER=$(echo "$COMMIT_MSG" | sed -n 's/.*Merge pull request #\([0-9]*\).*/\1/p')
            
          else
            # Direct push (not a merge)
            IS_MERGE="false"
            MERGED_BRANCH=""
            PR_NUMBER=""
          fi
          
          # Set outputs
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
          echo "commit_msg=${COMMIT_MSG}" >> $GITHUB_OUTPUT
          echo "author_name=${AUTHOR_NAME}" >> $GITHUB_OUTPUT
          echo "commit_url=${COMMIT_URL}" >> $GITHUB_OUTPUT
          echo "repo_url=${REPO_URL}" >> $GITHUB_OUTPUT
          echo "is_merge=${IS_MERGE}" >> $GITHUB_OUTPUT
          echo "merged_branch=${MERGED_BRANCH}" >> $GITHUB_OUTPUT
          echo "pr_number=${PR_NUMBER}" >> $GITHUB_OUTPUT

      - name: Prepare Discord message
        id: discord-prep
        run: |
          # Choose emoji and action based on merge status
          if [[ "${{ steps.git-info.outputs.is_merge }}" == "true" ]]; then
            EMOJI="üéâ"
            ACTION_TYPE="MERGE"
            ACTION_DESC="Code merged"
          else
            EMOJI="‚ö°"
            ACTION_TYPE="PUSH"
            ACTION_DESC="Code pushed"
          fi
          
          # Repository-specific colors and emojis
          case "${{ inputs.repository_name }}" in
            "api")
              COLOR="3066993"      # Green
              REPO_EMOJI="üîß"
              ;;
            "client")
              COLOR="15844367"     # Gold/Orange  
              REPO_EMOJI="üì±"
              ;;
            "infra")
              COLOR="10181046"     # Purple
              REPO_EMOJI="‚öôÔ∏è"
              ;;
            *)
              COLOR="5793266"      # Blue
              REPO_EMOJI="üì¶"
              ;;
          esac
          
          # Build clean title
          if [[ "${{ steps.git-info.outputs.is_merge }}" == "true" ]]; then
            TITLE="${EMOJI} OMG GET MERGED"
          else
            TITLE="${EMOJI} OMG GET PUSHED"
          fi
          
          # Add merge info if it's a merge
          if [[ "${{ steps.git-info.outputs.is_merge }}" == "true" ]]; then
            BRANCH_NAME="${{ steps.git-info.outputs.merged_branch }}"
            if [[ -n "${{ steps.git-info.outputs.pr_number }}" ]]; then
              PR_URL="${{ steps.git-info.outputs.repo_url }}/pull/${{ steps.git-info.outputs.pr_number }}"
              DESCRIPTION="üîÄ Merged **${BRANCH_NAME}** ‚Üí [#${{ steps.git-info.outputs.pr_number }}](${PR_URL})"
            else
              DESCRIPTION="üîÄ Merged branch **${BRANCH_NAME}**"
            fi
          else
            DESCRIPTION=""
          fi
          
          # Set outputs
          echo "emoji=${EMOJI}" >> $GITHUB_OUTPUT
          echo "color=${COLOR}" >> $GITHUB_OUTPUT
          echo "title=${TITLE}" >> $GITHUB_OUTPUT
          echo "description<<EOF" >> $GITHUB_OUTPUT
          echo "${DESCRIPTION}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Discord notification
        run: |
          # Create timestamp
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
          UNIX_TIMESTAMP=$(date +%s)

          # Set webhook URL and role mention based on repository
          case "${{ inputs.repository_name }}" in
            "api")
              WEBHOOK_URL="${{ secrets.PR_BACK_REMINDER_WEBHOOK_URL }}"
              ROLE_MENTION="<@&API>"
              ;;
            "client")
              WEBHOOK_URL="${{ secrets.PR_FRONT_REMINDER_WEBHOOK_URL }}"
              ROLE_MENTION="<@&Client>"
              ;;
            "infra")
              WEBHOOK_URL="${{ secrets.PR_DEVOPS_REMINDER_WEBHOOK_URL }}"
              ROLE_MENTION="<@&Infra>"
              ;;
            *)
              WEBHOOK_URL="${{ secrets.DISCORD_WEBHOOK_URL }}"
              ROLE_MENTION=""
              ;;
          esac
          
          # Use jq to safely build JSON without shell interpretation issues
          jq -n \
            --arg title "${{ steps.discord-prep.outputs.title }}" \
            --arg description "${{ steps.discord-prep.outputs.description }}" \
            --argjson color "${{ steps.discord-prep.outputs.color }}" \
            --arg repo_name "${{ inputs.repository_name }}" \
            --arg repo_url "${{ steps.git-info.outputs.repo_url }}" \
            --arg target_branch "${{ inputs.target_branch }}" \
            --arg author_name "${{ steps.git-info.outputs.author_name }}" \
            --arg short_sha "${{ steps.git-info.outputs.short_sha }}" \
            --arg commit_url "${{ steps.git-info.outputs.commit_url }}" \
            --arg commit_msg "${{ steps.git-info.outputs.commit_msg }}" \
            --arg timestamp "${TIMESTAMP}" \
            --argjson unix_timestamp "${UNIX_TIMESTAMP}" \
            --arg role_mention "${ROLE_MENTION}" \
            '{
              "content": (if $role_mention != "" then $role_mention else null end),
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "fields": [
                    {
                      "name": "üì¶ Repository",
                      "value": "[\($repo_name)](\($repo_url))",
                      "inline": true
                    },
                    {
                      "name": "üåø Branch",
                      "value": "`\($target_branch)`",
                      "inline": true
                    },
                    {
                      "name": "üë§ Author",
                      "value": $author_name,
                      "inline": true
                    },
                    {
                      "name": "üìù Commit",
                      "value": "[`\($short_sha)`](\($commit_url))",
                      "inline": true
                    },
                    {
                      "name": "üïí Time",
                      "value": "<t:\($unix_timestamp):R>",
                      "inline": true
                    },
                    {
                      "name": "üîó Actions",
                      "value": "[View Commit](\($commit_url)) ‚Ä¢ [View Repo](\($repo_url))",
                      "inline": true
                    },
                    {
                      "name": "üí¨ Message",
                      "value": ($commit_msg | if length > 150 then .[0:150] + "..." else . end),
                      "inline": false
                    }
                  ],
                  "timestamp": $timestamp,
                  "footer": {
                    "text": "\($repo_name) ‚Ä¢ GitHub Actions",
                    "icon_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"
                  }
                }
              ]
            }' > discord_payload.json
          
          # Send to Discord using the selected webhook URL
          HTTP_RESPONSE=$(curl -s -w "%{http_code}" \
                              -H "Content-Type: application/json" \
                              -d @discord_payload.json \
                              "${WEBHOOK_URL}")
          
          HTTP_CODE=${HTTP_RESPONSE: -3}
          
          if [[ $HTTP_CODE -ge 200 && $HTTP_CODE -lt 300 ]]; then
            echo "‚úÖ Discord notification sent successfully! (HTTP $HTTP_CODE)"
          else
            echo "‚ùå Failed to send Discord notification. HTTP Code: $HTTP_CODE"
            echo "Response: ${HTTP_RESPONSE%???}"
            exit 1
          fi
          fi