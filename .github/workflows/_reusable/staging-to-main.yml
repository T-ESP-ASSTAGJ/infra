name: üì¶ Create Production Deployment PR (Reusable)

on:
  workflow_call:
    inputs:
      repository_name:
        required: true
        type: string
        description: "Name of the repository (infra, client, api)"
      environment:
        required: false
        type: string
        default: 'production'
        description: 'Target environment'
      source_branch:
        required: false
        type: string
        default: 'staging'
        description: 'Source branch for deployment'
      include_tickets:
        required: false
        type: boolean
        default: true
        description: 'Include ticket summary'
      reviewers:
        required: false
        type: string
        description: "Comma-separated list of reviewers"
      team_reviewers:
        required: false
        type: string
        description: "Comma-separated list of team reviewers"
    secrets:
      AUTO_DEPLOY_TOKEN:
        required: true
        description: "GitHub token with push/PR permissions"

jobs:
  create-deployment-pr:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.AUTO_DEPLOY_TOKEN }}

      - name: Set repository context
        id: repo_context
        run: |
          REPO_NAME="${{ inputs.repository_name }}"
          
          case "$REPO_NAME" in
            "infra")
              echo "emoji=üèóÔ∏è" >> $GITHUB_OUTPUT
              echo "context=Infrastructure" >> $GITHUB_OUTPUT
              echo "deployment_type=Infrastructure Deployment" >> $GITHUB_OUTPUT
              ;;
            "client")
              echo "emoji=üñ•Ô∏è" >> $GITHUB_OUTPUT
              echo "context=Frontend Application" >> $GITHUB_OUTPUT
              echo "deployment_type=Frontend Deployment" >> $GITHUB_OUTPUT
              ;;
            "api")
              echo "emoji=üîå" >> $GITHUB_OUTPUT
              echo "context=Backend API" >> $GITHUB_OUTPUT
              echo "deployment_type=API Deployment" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "emoji=üöÄ" >> $GITHUB_OUTPUT
              echo "context=Application" >> $GITHUB_OUTPUT
              echo "deployment_type=Application Deployment" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Determine branches
        id: branches
        run: |
          # Determine main branch name
          if git ls-remote --heads origin | grep -q "refs/heads/master"; then
            if ! git ls-remote --heads origin | grep -q "refs/heads/main"; then
              echo "main_branch=master" >> $GITHUB_OUTPUT
            else
              echo "main_branch=main" >> $GITHUB_OUTPUT
            fi
          else
            echo "main_branch=main" >> $GITHUB_OUTPUT
          fi
          
          echo "source_branch=${{ inputs.source_branch }}" >> $GITHUB_OUTPUT

      - name: Get tickets for deployment
        id: tickets
        if: inputs.include_tickets
        run: |
          MAIN_BRANCH="${{ steps.branches.outputs.main_branch }}"
          SOURCE_BRANCH="${{ inputs.source_branch }}"
          
          # Ensure we have the latest refs
          git fetch origin $MAIN_BRANCH:$MAIN_BRANCH 2>/dev/null || git checkout -b $MAIN_BRANCH origin/$MAIN_BRANCH
          git fetch origin $SOURCE_BRANCH:$SOURCE_BRANCH 2>/dev/null || true
          
          # Get commits in source branch but not in main
          COMMITS_IN_SOURCE=$(git log $SOURCE_BRANCH --not $MAIN_BRANCH --oneline --no-merges | head -20)
          
          # Extract TEM tickets from commit messages and branch references
          TICKETS=$(echo "$COMMITS_IN_SOURCE" | grep -oE 'TEM-[0-9]+' | sort | uniq || true)
          
          # Also check merge commits for branch references
          MERGE_TICKETS=$(git log $SOURCE_BRANCH --not $MAIN_BRANCH --oneline --merges | grep -oE 'from TEM-[0-9]+' | sed 's/from //' | sort | uniq || true)
          
          # Combine both sets of tickets
          ALL_TICKETS=$(echo -e "$TICKETS\n$MERGE_TICKETS" | grep -v '^$' | sort | uniq || true)
          
          if [[ -n "$ALL_TICKETS" ]]; then
            TICKET_COUNT=$(echo "$ALL_TICKETS" | wc -l | tr -d ' ')
          
            echo "tickets_found=true" >> $GITHUB_OUTPUT
            echo "ticket_count=$TICKET_COUNT" >> $GITHUB_OUTPUT
            echo "ticket_list<<EOF" >> $GITHUB_OUTPUT
            echo "$ALL_TICKETS" | sed 's/^/- /'  >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "tickets_found=false" >> $GITHUB_OUTPUT
            echo "ticket_count=0" >> $GITHUB_OUTPUT
            echo "ticket_list=" >> $GITHUB_OUTPUT
          fi

      - name: Check for existing PR
        id: existing_pr
        run: |
          SOURCE="${{ steps.branches.outputs.source_branch }}"
          TARGET="${{ steps.branches.outputs.main_branch }}"
          
          # Check if PR already exists
          EXISTING_PR=$(gh pr list --base "$TARGET" --head "$SOURCE" --json number,title --jq '.[0].number' 2>/dev/null || echo "")
          
          if [[ -n "$EXISTING_PR" && "$EXISTING_PR" != "null" ]]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "pr_number=$EXISTING_PR" >> $GITHUB_OUTPUT
            echo "üîç Found existing PR #$EXISTING_PR"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "pr_number=" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.AUTO_DEPLOY_TOKEN }}

      - name: Create Production PR
        if: steps.existing_pr.outputs.exists == 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.AUTO_DEPLOY_TOKEN }}
          branch: ${{ steps.branches.outputs.source_branch }}
          base: ${{ steps.branches.outputs.main_branch }}
          title: "${{ steps.repo_context.outputs.emoji }} Deploy ${{ inputs.repository_name }} to ${{ inputs.environment }}: ${{ steps.tickets.outputs.ticket_count || '0' }} tickets ready"
          body: |
            ## ${{ steps.repo_context.outputs.emoji }} ${{ steps.repo_context.outputs.deployment_type }}
            
            **Repository**: `${{ inputs.repository_name }}`  
            **Environment**: ${{ inputs.environment }}  
            **Component**: ${{ steps.repo_context.outputs.context }}  
            **Tickets Ready**: ${{ steps.tickets.outputs.ticket_count || '0' }}  
            **Source**: `${{ steps.branches.outputs.source_branch }}`  
            **Target**: `${{ steps.branches.outputs.main_branch }}`  
            
            ${{ steps.tickets.outputs.tickets_found == 'true' && format('### üé´ Tickets Included:\n{0}', steps.tickets.outputs.ticket_list) || '### üìù Changes:\nNo specific tickets found - see commit history for details.' }}
            
            ### ‚úÖ Pre-deployment Checklist
            - [ ] All tickets tested on staging
            ${{ inputs.repository_name == 'infra' && '- [ ] Infrastructure changes validated' || '' }}
            ${{ inputs.repository_name == 'infra' && '- [ ] Security configurations reviewed' || '' }}
            ${{ inputs.repository_name == 'client' && '- [ ] Frontend builds successfully' || '' }}
            ${{ inputs.repository_name == 'client' && '- [ ] Cross-browser compatibility tested' || '' }}
            ${{ inputs.repository_name == 'api' && '- [ ] API endpoints tested' || '' }}
            ${{ inputs.repository_name == 'api' && '- [ ] Database migrations reviewed (if applicable)' || '' }}
            - [ ] Monitoring alerts configured
            - [ ] Rollback plan confirmed
            - [ ] Stakeholders notified
            
            ### üìã Post-deployment Tasks
            - [ ] Verify deployment health
            - [ ] Monitor error rates
            - [ ] Validate critical user journeys
            ${{ inputs.repository_name == 'infra' && '- [ ] Check infrastructure metrics' || '' }}
            ${{ inputs.repository_name == 'client' && '- [ ] Verify frontend functionality' || '' }}
            ${{ inputs.repository_name == 'api' && '- [ ] Test API endpoints' || '' }}
            - [ ] Update deployment log
            
            ### üîÑ Deployment Info
            - **Repository**: ${{ inputs.repository_name }}
            - **Component**: ${{ steps.repo_context.outputs.context }}
            - **Triggered by**: @${{ github.actor }}
            - **Timestamp**: ${{ github.event.repository.updated_at }}
            
            ---
            ü§ñ *Auto-created deployment PR for ${{ inputs.repository_name }} repository*
          labels: |
            deployment
            ${{ inputs.environment }}
            ${{ inputs.repository_name }}
            manual-trigger
          reviewers: ${{ inputs.reviewers }}
          team-reviewers: ${{ inputs.team_reviewers }}
          draft: false

      - name: Update existing PR
        if: steps.existing_pr.outputs.exists == 'true'
        run: |
          PR_NUMBER="${{ steps.existing_pr.outputs.pr_number }}"
          TIMESTAMP=$(date -Iseconds)
          
          gh pr edit $PR_NUMBER --body "$(cat << EOF
          ## ${{ steps.repo_context.outputs.emoji }} ${{ steps.repo_context.outputs.deployment_type }} (Updated)
          
          **Repository**: \`${{ inputs.repository_name }}\`  
          **Environment**: ${{ inputs.environment }}  
          **Component**: ${{ steps.repo_context.outputs.context }}  
          **Tickets Ready**: ${{ steps.tickets.outputs.ticket_count || '0' }}  
          **Source**: \`${{ steps.branches.outputs.source_branch }}\`  
          **Target**: \`${{ steps.branches.outputs.main_branch }}\`  
          **Last Updated**: $TIMESTAMP  
          
          ${{ steps.tickets.outputs.tickets_found == 'true' && format('{0}', steps.tickets.outputs.ticket_list) || '### üìù Changes:\nNo specific tickets found - see commit history for details.' }}
          
          ### ‚úÖ Pre-deployment Checklist
          - [ ] All tickets tested on staging
          ${{ inputs.repository_name == 'infra' && '- [ ] Infrastructure changes validated' || '' }}
          ${{ inputs.repository_name == 'infra' && '- [ ] Security configurations reviewed' || '' }}
          ${{ inputs.repository_name == 'client' && '- [ ] Frontend builds successfully' || '' }}
          ${{ inputs.repository_name == 'client' && '- [ ] Cross-browser compatibility tested' || '' }}
          ${{ inputs.repository_name == 'api' && '- [ ] API endpoints tested' || '' }}
          ${{ inputs.repository_name == 'api' && '- [ ] Database migrations reviewed (if applicable)' || '' }}
          - [ ] Monitoring alerts configured
          - [ ] Rollback plan confirmed
          - [ ] Stakeholders notified
          
          ### üìã Post-deployment Tasks
          - [ ] Verify deployment health
          - [ ] Monitor error rates  
          - [ ] Validate critical user journeys
          ${{ inputs.repository_name == 'infra' && '- [ ] Check infrastructure metrics' || '' }}
          ${{ inputs.repository_name == 'client' && '- [ ] Verify frontend functionality' || '' }}
          ${{ inputs.repository_name == 'api' && '- [ ] Test API endpoints' || '' }}
          - [ ] Update deployment log
          
          ### üîÑ Deployment Info
          - **Repository**: ${{ inputs.repository_name }}
          - **Component**: ${{ steps.repo_context.outputs.context }}
          - **Triggered by**: @${{ github.actor }}
          - **Timestamp**: $TIMESTAMP
          
          ---
          ü§ñ *Updated deployment PR for ${{ inputs.repository_name }} repository*
          EOF
          )"
          
          echo "‚úÖ Updated existing PR #$PR_NUMBER"
        env:
          GH_TOKEN: ${{ secrets.AUTO_DEPLOY_TOKEN }}

      - name: Summary
        run: |
          if [[ "${{ steps.existing_pr.outputs.exists }}" == "true" ]]; then
            echo "üìù Updated existing PR #${{ steps.existing_pr.outputs.pr_number }} for ${{ inputs.repository_name }}"
          else
            echo "‚úÖ Created new deployment PR for ${{ inputs.repository_name }}: ${{ steps.branches.outputs.source_branch }} ‚Üí ${{ steps.branches.outputs.main_branch }}"
          fi
          
          if [[ "${{ steps.tickets.outputs.tickets_found }}" == "true" ]]; then
            echo "üé´ Found ${{ steps.tickets.outputs.ticket_count }} tickets ready for deployment"
          else
            echo "üìù No specific tickets found - manual review recommended"
          fi