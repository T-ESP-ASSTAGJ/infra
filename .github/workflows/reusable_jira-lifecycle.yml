name: üé´ Jira Ticket Lifecycle (Reusable)

on:
  workflow_call:
    inputs:
      repository_name:
        required: true
        type: string
        description: "Name of the repository (infra, client, api)"
    secrets:
      JIRA_API_TOKEN:
        required: true
        description: "Jira API token"

jobs:
  update-jira-status:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set repository context
        id: repo_context
        run: |
          REPO_NAME="${{ inputs.repository_name }}"
          
          case "$REPO_NAME" in
            "infra")
              echo "emoji=üèóÔ∏è" >> $GITHUB_OUTPUT
              echo "context=Infrastructure" >> $GITHUB_OUTPUT
              ;;
            "client")
              echo "emoji=üñ•Ô∏è" >> $GITHUB_OUTPUT
              echo "context=Frontend" >> $GITHUB_OUTPUT
              ;;
            "api")
              echo "emoji=üîå" >> $GITHUB_OUTPUT
              echo "context=Backend API" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "emoji=üîÄ" >> $GITHUB_OUTPUT
              echo "context=Application" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Extract ticket from branch or PR
        id: extract_ticket
        run: |
          # Extract ticket ID from different sources
          TICKET_ID=""
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Try to get from PR head branch
            HEAD_BRANCH="${{ github.head_ref }}"
            if [[ "$HEAD_BRANCH" =~ ^TEM-[0-9]+$ ]]; then
              TICKET_ID="$HEAD_BRANCH"
            fi
          
            # If not found, try PR title
            if [[ -z "$TICKET_ID" ]]; then
              PR_TITLE="${{ github.event.pull_request.title }}"
              TICKET_ID=$(echo "$PR_TITLE" | grep -oE 'TEM-[0-9]+' | head -1 || echo "")
            fi
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # For push events, get from recent merge commits
            RECENT_MERGES=$(git log --oneline -5 --merges --format="%s" | head -5)
            TICKET_ID=$(echo "$RECENT_MERGES" | grep -oE 'TEM-[0-9]+' | head -1 || echo "")
          fi
          
          if [[ -n "$TICKET_ID" ]]; then
            echo "ticket_id=$TICKET_ID" >> $GITHUB_OUTPUT
            echo "has_ticket=true" >> $GITHUB_OUTPUT
            echo "${{ steps.repo_context.outputs.emoji }} Found ticket: $TICKET_ID in ${{ inputs.repository_name }}"
          else
            echo "has_ticket=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No TEM ticket found in ${{ inputs.repository_name }}"
          fi

      - name: Determine target status
        id: target_status
        if: steps.extract_ticket.outputs.has_ticket == 'true'
        run: |
          EVENT_NAME="${{ github.event_name }}"
          REPO_NAME="${{ inputs.repository_name }}"
          
          if [[ "$EVENT_NAME" == "pull_request" ]]; then
            ACTION="${{ github.event.action }}"
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          
            if [[ "$ACTION" == "opened" ]]; then
              echo "status=In Review" >> $GITHUB_OUTPUT
              echo "reason=Pull request opened for review in $REPO_NAME repository" >> $GITHUB_OUTPUT
            elif [[ "$ACTION" == "closed" && "${{ github.event.pull_request.merged }}" == "true" ]]; then
              if [[ "$BASE_BRANCH" == "staging" ]]; then
                echo "status=Testing" >> $GITHUB_OUTPUT
                echo "reason=Merged to staging in $REPO_NAME - ready for QA testing" >> $GITHUB_OUTPUT
              elif [[ "$BASE_BRANCH" == "main" || "$BASE_BRANCH" == "master" ]]; then
                echo "status=Done" >> $GITHUB_OUTPUT
                echo "reason=Deployed to production from $REPO_NAME repository" >> $GITHUB_OUTPUT
              fi
            fi
          elif [[ "$EVENT_NAME" == "push" ]]; then
            BRANCH="${{ github.ref_name }}"
          
            if [[ "$BRANCH" == "staging" ]]; then
              echo "status=Testing" >> $GITHUB_OUTPUT
              echo "reason=Code deployed to staging environment ($REPO_NAME)" >> $GITHUB_OUTPUT
            elif [[ "$BRANCH" == "main" || "$BRANCH" == "master" ]]; then
              echo "status=Done" >> $GITHUB_OUTPUT
              echo "reason=Successfully deployed to production ($REPO_NAME)" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Update Jira ticket
        if: steps.extract_ticket.outputs.has_ticket == 'true' && steps.target_status.outputs.status != ''
        run: |
          TICKET_ID="${{ steps.extract_ticket.outputs.ticket_id }}"
          TARGET_STATUS="${{ steps.target_status.outputs.status }}"
          REASON="${{ steps.target_status.outputs.reason }}"
          REPO_NAME="${{ inputs.repository_name }}"
          REPO_EMOJI="${{ steps.repo_context.outputs.emoji }}"
          REPO_CONTEXT="${{ steps.repo_context.outputs.context }}"
          
          echo "$REPO_EMOJI Updating $TICKET_ID to '$TARGET_STATUS' ($REPO_NAME)"
          
          # Get current ticket info
          TICKET_RESPONSE=$(curl -s -u "${{ secrets.JIRA_API_TOKEN }}" \
            "https://t-esp-asstagj.atlassian.net/rest/api/3/issue/$TICKET_ID?fields=status,summary" \
            -w "\n%{http_code}")
          
          HTTP_CODE=$(echo "$TICKET_RESPONSE" | tail -n1)
          TICKET_DATA=$(echo "$TICKET_RESPONSE" | head -n -1)
          
          if [[ "$HTTP_CODE" != "200" ]]; then
            echo "‚ùå Failed to get ticket info (HTTP $HTTP_CODE)"
            echo "$TICKET_DATA"
            exit 1
          fi
          
          CURRENT_STATUS=$(echo "$TICKET_DATA" | jq -r '.fields.status.name')
          SUMMARY=$(echo "$TICKET_DATA" | jq -r '.fields.summary')
          
          echo "üìä Current status: $CURRENT_STATUS"
          echo "üìã Summary: $SUMMARY"
          
          # Skip if already in target status
          if [[ "$CURRENT_STATUS" == "$TARGET_STATUS" ]]; then
            echo "‚ÑπÔ∏è Ticket already in '$TARGET_STATUS' status"
            exit 0
          fi
          
          # Get available transitions
          TRANSITIONS_RESPONSE=$(curl -s -u "${{ secrets.JIRA_API_TOKEN }}" \
            "https://t-esp-asstagj.atlassian.net/rest/api/3/issue/$TICKET_ID/transitions" \
            -w "\n%{http_code}")
          
          HTTP_CODE=$(echo "$TRANSITIONS_RESPONSE" | tail -n1)
          TRANSITIONS_DATA=$(echo "$TRANSITIONS_RESPONSE" | head -n -1)
          
          if [[ "$HTTP_CODE" != "200" ]]; then
            echo "‚ùå Failed to get transitions (HTTP $HTTP_CODE)"
            exit 1
          fi
          
          # Find transition ID for target status
          TRANSITION_ID=$(echo "$TRANSITIONS_DATA" | jq -r ".transitions[] | select(.to.name == \"$TARGET_STATUS\") | .id")
          
          if [[ -z "$TRANSITION_ID" || "$TRANSITION_ID" == "null" ]]; then
            echo "‚ùå Cannot transition to '$TARGET_STATUS'"
            echo "Available transitions:"
            echo "$TRANSITIONS_DATA" | jq -r '.transitions[] | "  \(.name) ‚Üí \(.to.name)"'
            exit 1
          fi
          
          # Execute transition
          TRANSITION_RESPONSE=$(curl -s -u "${{ secrets.JIRA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "{\"transition\":{\"id\":\"$TRANSITION_ID\"}}" \
            "https://t-esp-asstagj.atlassian.net/rest/api/3/issue/$TICKET_ID/transitions" \
            -w "\n%{http_code}")
          
          HTTP_CODE=$(echo "$TRANSITION_RESPONSE" | tail -n1)
          
          if [[ "$HTTP_CODE" == "204" ]]; then
            echo "‚úÖ Successfully transitioned $TICKET_ID to '$TARGET_STATUS'"
          else
            echo "‚ùå Failed to transition ticket (HTTP $HTTP_CODE)"
            echo "$TRANSITION_RESPONSE" | head -n -1
            exit 1
          fi
          
          # Add comment to ticket
          COMMENT_BODY="## $REPO_EMOJI Automated Status Update
          
          **Repository**: \`$REPO_NAME\` ($REPO_CONTEXT)  
          **Status**: $CURRENT_STATUS ‚Üí $TARGET_STATUS  
          **Reason**: $REASON  
          **Event**: ${{ github.event_name }}  
          **Actor**: ${{ github.actor }}  
          **Commit**: [\`${GITHUB_SHA:0:8}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})  
          **Timestamp**: $(date -Iseconds)  
          
          ---
          *Automated by GitHub Actions from $REPO_NAME repository*"
          
          # Convert markdown to Atlassian Document Format
          COMMENT_JSON=$(jq -n \
            --arg body "$COMMENT_BODY" \
            '{
              "body": {
                "type": "doc",
                "version": 1,
                "content": [
                  {
                    "type": "paragraph",
                    "content": [
                      {
                        "type": "text",
                        "text": $body
                      }
                    ]
                  }
                ]
              }
            }')
          
          # Add comment
          COMMENT_RESPONSE=$(curl -s -u "${{ secrets.JIRA_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "$COMMENT_JSON" \
            "https://t-esp-asstagj.atlassian.net/rest/api/3/issue/$TICKET_ID/comment" \
            -w "\n%{http_code}")
          
          HTTP_CODE=$(echo "$COMMENT_RESPONSE" | tail -n1)
          
          if [[ "$HTTP_CODE" == "201" ]]; then
            echo "üí¨ Added comment to ticket"
          else
            echo "‚ö†Ô∏è Failed to add comment (HTTP $HTTP_CODE) - continuing anyway"
          fi

      - name: Summary
        run: |
          REPO_EMOJI="${{ steps.repo_context.outputs.emoji }}"
          REPO_NAME="${{ inputs.repository_name }}"
          
          if [[ "${{ steps.extract_ticket.outputs.has_ticket }}" == "true" ]]; then
            TICKET_ID="${{ steps.extract_ticket.outputs.ticket_id }}"
            TARGET_STATUS="${{ steps.target_status.outputs.status }}"
          
            if [[ -n "$TARGET_STATUS" ]]; then
              echo "$REPO_EMOJI Updated $TICKET_ID to '$TARGET_STATUS' from $REPO_NAME"
            else
              echo "$REPO_EMOJI No status update needed for $TICKET_ID from $REPO_NAME"
            fi
          else
            echo "$REPO_EMOJI No TEM tickets found to update in $REPO_NAME"
          fi