# infra/.github/workflows/trivy-scan.yml

name: Trivy Security Pipeline Scan

on:
  workflow_call:
    inputs:
      image_name:
        required: false
        type: string
        description: 'Docker image name to scan'
      image_tag:
        required: false
        type: string
        default: ${{ github.sha }}
        description: 'Docker image tag'
      trivy_config_file:
        required: false
        type: string
        default: '.github/trivy.yaml'
        description: 'Path to Trivy config file'
      discord_webhook_url:
        required: false
        type: string
        description: 'Discord webhook URL for alerts'
    outputs:
      scan_results:
        description: 'Summary of scan results'
        value: ${{ jobs.trivy-security-scan.outputs.results_summary }}
      vulnerabilities_found:
        description: 'Whether critical/high vulnerabilities were found'
        value: ${{ jobs.trivy-security-scan.outputs.has_vulnerabilities }}

jobs:
  trivy-security-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    outputs:
      results_summary: ${{ steps.summary.outputs.results }}
      has_vulnerabilities: ${{ steps.summary.outputs.has_vulns }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Trivy une seule fois avec cache
      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          cache: true
          version: v0.64.1

      # Créer config Trivy par défaut si elle n'existe pas
      - name: Create default Trivy config
        if: ${{ !contains(inputs.trivy_config_file, '/') }}
        run: |
          echo "Creating default Trivy configuration..."
          mkdir -p .github
          cat > .github/trivy.yaml << 'EOF'
          format: sarif
          severity:
            - CRITICAL
            - HIGH
            - MEDIUM
          vulnerability:
            ignore-unfixed: true
          secret:
            config: ''
          dependency:
            check: true
          EOF
          echo "Default Trivy config created at .github/trivy.yaml"

      # Détection automatique du type de projet
      - name: Detect project type
        id: detect
        run: |
          echo "=== Detecting project structure ==="
          
          # Détection des langages/frameworks
          if [ -f "composer.json" ]; then
            echo "php_project=true" >> $GITHUB_OUTPUT
            echo "PHP project detected (composer.json found)"
          fi
          
          if [ -f "package.json" ]; then
            echo "js_project=true" >> $GITHUB_OUTPUT
            echo "JavaScript/Node project detected (package.json found)"
          fi
          
          if [ -f "Dockerfile" ]; then
            echo "docker_project=true" >> $GITHUB_OUTPUT
            echo "Docker project detected (Dockerfile found)"
          fi
          
          echo "=== Detection complete ==="

      # Scan 1: Filesystem (dépendances PHP/JS)
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          trivy-config: ${{ inputs.trivy_config_file }}
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          skip-setup-trivy: true

      # Scan 2: Image Docker (si applicable)
      - name: Run Trivy image scan
        if: ${{ steps.detect.outputs.docker_project == 'true' && inputs.image_name != '' }}
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'image'
          image-ref: '${{ inputs.image_name }}:${{ inputs.image_tag }}'
          trivy-config: ${{ inputs.trivy_config_file }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'
          skip-setup-trivy: true

      # Upload des résultats vers GitHub Security
      - name: Upload filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.detect.outputs.docker_project == 'true' && inputs.image_name != ''
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-image'

      - name: Generate human-readable report
        run: |
          echo "# Security Scan Report" > scan-report.md
          echo "" >> scan-report.md
          echo "## Scan Summary" >> scan-report.md
          echo "" >> scan-report.md
          
          # Filesystem scan summary
          echo "### Filesystem Scan" >> scan-report.md
          if [ -f "trivy-fs-results.sarif" ]; then
            trivy fs . --format table --severity CRITICAL,HIGH,MEDIUM >> scan-report.md 2>/dev/null || echo "No vulnerabilities found in filesystem" >> scan-report.md
          fi
          echo "" >> scan-report.md
          
          # Image scan summary (si applicable)
          if [ "${{ steps.detect.outputs.docker_project }}" == "true" ] && [ "${{ inputs.image_name }}" != "" ]; then
            echo "### Docker Image Scan" >> scan-report.md
            trivy image ${{ inputs.image_name }}:${{ inputs.image_tag }} --format table --severity CRITICAL,HIGH,MEDIUM >> scan-report.md 2>/dev/null || echo "No vulnerabilities found in image" >> scan-report.md
            echo "" >> scan-report.md
          fi

      # Analyse des résultats pour alertes
      - name: Analyze scan results
        id: summary
        run: |
          echo "=== Analyzing scan results ==="
          
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          
          # Compter les vulnérabilités dans les fichiers SARIF
          if [ -f "trivy-fs-results.sarif" ]; then
            FS_CRITICAL=$(jq '[.runs[].results[] | select(.level == "error")] | length' trivy-fs-results.sarif 2>/dev/null || echo "0")
            FS_HIGH=$(jq '[.runs[].results[] | select(.level == "warning")] | length' trivy-fs-results.sarif 2>/dev/null || echo "0")
            CRITICAL_COUNT=$((CRITICAL_COUNT + FS_CRITICAL))
            HIGH_COUNT=$((HIGH_COUNT + FS_HIGH))
          fi
          
          if [ -f "trivy-image-results.sarif" ]; then
            IMG_CRITICAL=$(jq '[.runs[].results[] | select(.level == "error")] | length' trivy-image-results.sarif 2>/dev/null || echo "0")
            IMG_HIGH=$(jq '[.runs[].results[] | select(.level == "warning")] | length' trivy-image-results.sarif 2>/dev/null || echo "0")
            CRITICAL_COUNT=$((CRITICAL_COUNT + IMG_CRITICAL))
            HIGH_COUNT=$((HIGH_COUNT + IMG_HIGH))
          fi
          
          echo "Found $CRITICAL_COUNT critical and $HIGH_COUNT high vulnerabilities"
          
          # Préparer le résumé
          SUMMARY="Critical: $CRITICAL_COUNT, High: $HIGH_COUNT"
          echo "results=$SUMMARY" >> $GITHUB_OUTPUT
          
          # Déterminer s'il faut alerter
          if [ $CRITICAL_COUNT -gt 0 ] || [ $HIGH_COUNT -gt 0 ]; then
            echo "has_vulns=true" >> $GITHUB_OUTPUT
            echo "Vulnerabilities found - alerts will be sent"
          else
            echo "has_vulns=false" >> $GITHUB_OUTPUT
            echo "No critical/high vulnerabilities found"
          fi

      # Alerte Discord
      - name: Send Discord alert
        if: ${{ steps.summary.outputs.has_vulns == 'true' && inputs.discord_webhook_url != '' }}
        run: |
          curl -H "Content-Type: application/json" \
               -d '{
                 "embeds": [{
                   "title": "Security Vulnerabilities Detected",
                   "description": "Critical or High vulnerabilities found in `${{ github.repository }}`",
                   "color": 15158332,
                   "fields": [
                     {
                       "name": "Repository",
                       "value": "${{ github.repository }}",
                       "inline": true
                     },
                     {
                       "name": "Branch",
                       "value": "${{ github.ref_name }}",
                       "inline": true
                     },
                     {
                       "name": "Vulnerabilities",
                       "value": "${{ steps.summary.outputs.results }}",
                       "inline": true
                     },
                     {
                       "name": "Commit",
                       "value": "${{ github.sha }}",
                       "inline": true
                     }
                   ],
                   "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
                 }]
               }' \
               ${{ inputs.discord_webhook_url }}

      # Upload des artifacts pour consultation
      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-reports
          path: |
            trivy-*-results.sarif
            scan-report.md
          retention-days: 30

      # Commentaire sur la PR (si c'est une PR)
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const reportContent = fs.readFileSync('scan-report.md', 'utf8');
            
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportContent
              });
            } catch (error) {
              console.log('Could not read or post scan report:', error);
            }