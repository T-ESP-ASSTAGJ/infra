# infra/.github/workflows/trivy-scan.yml

name: Trivy Security Pipeline Scan

on:
  workflow_call:
    inputs:
      image_name:
        required: false
        type: string
        description: 'Docker image name to scan'
      image_tag:
        required: false
        type: string
        default: ${{ github.sha }}
        description: 'Docker image tag'
      trivy_config_file:
        required: false
        type: string
        default: '.github/trivy.yaml'
        description: 'Path to Trivy config file'
      discord_webhook_url:
        required: false
        type: string
        description: 'Discord webhook URL for alerts'
    secrets:
      DISCORD_WEBHOOK_URL:
        required: false
        description: 'Discord webhook URL for alerts'
      GH_TOKEN:
        required: false
        description: 'GitHub token for registry access'
    outputs:
      scan_results:
        description: 'Summary of scan results'
        value: ${{ jobs.trivy-security-scan.outputs.results_summary }}
      vulnerabilities_found:
        description: 'Whether critical/high vulnerabilities were found'
        value: ${{ jobs.trivy-security-scan.outputs.has_vulnerabilities }}

jobs:
  trivy-security-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write  # Permission pour upload SARIF
      contents: read          # Permission pour checkout
      pull-requests: write    # Permission pour commenter les PRs
    outputs:
      results_summary: ${{ steps.summary.outputs.results }}
      has_vulnerabilities: ${{ steps.summary.outputs.has_vulns }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Trivy une seule fois avec cache
      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          cache: true
          version: v0.64.1

      # Cr√©er config Trivy par d√©faut si elle n'existe pas
      - name: Create default Trivy config
        if: ${{ !contains(inputs.trivy_config_file, '/') }}
        run: |
          echo "Creating default Trivy configuration..."
          mkdir -p .github
          cat > .github/trivy.yaml << 'EOF'
          format: sarif
          severity:
            - CRITICAL
            - HIGH
            - MEDIUM
          vulnerability:
            ignore-unfixed: true
          secret:
            config: ''
          dependency:
            check: true
          EOF
          echo "Default Trivy config created at .github/trivy.yaml"

      # Authentification au registry pour les scans d'images
      - name: Login to GitHub Container Registry
        if: ${{ inputs.image_name != '' && contains(inputs.image_name, 'ghcr.io') }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}

      # D√©tection automatique du type de projet
      - name: Detect project type and prepare scan info
        id: detect
        run: |
          echo "=== Detecting project structure ==="
          
          SCAN_TYPES=""
          SCAN_COUNT=0
          
          # D√©tection des langages/frameworks
          if [ -f "composer.json" ]; then
            echo "php_project=true" >> $GITHUB_OUTPUT
            echo "PHP project detected (composer.json found)"
            SCAN_TYPES="${SCAN_TYPES}üì¶ PHP Dependencies\n"
            SCAN_COUNT=$((SCAN_COUNT + 1))
          fi
          
          if [ -f "package.json" ]; then
            echo "js_project=true" >> $GITHUB_OUTPUT
            echo "JavaScript/Node project detected (package.json found)"
            SCAN_TYPES="${SCAN_TYPES}üì¶ Node.js Dependencies\n"
            SCAN_COUNT=$((SCAN_COUNT + 1))
          fi
          
          if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "Pipfile" ]; then
            echo "python_project=true" >> $GITHUB_OUTPUT
            echo "Python project detected"
            SCAN_TYPES="${SCAN_TYPES}üì¶ Python Dependencies\n"
            SCAN_COUNT=$((SCAN_COUNT + 1))
          fi
          
          if [ -f "Dockerfile" ]; then
            echo "docker_project=true" >> $GITHUB_OUTPUT
            echo "Docker project detected (Dockerfile found)"
            SCAN_TYPES="${SCAN_TYPES}üê≥ Docker Image\n"
            SCAN_COUNT=$((SCAN_COUNT + 1))
          fi
          
          # Toujours scanner le filesystem pour les secrets/config
          SCAN_TYPES="${SCAN_TYPES}üîç Filesystem Secrets\n"
          SCAN_COUNT=$((SCAN_COUNT + 1))
          
          # Toujours scanner le code source
          SCAN_TYPES="${SCAN_TYPES}üìÑ Source Code\n"
          SCAN_COUNT=$((SCAN_COUNT + 1))
          
          echo "scan_types<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SCAN_TYPES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "scan_count=$SCAN_COUNT" >> $GITHUB_OUTPUT
          
          echo "=== Detection complete - $SCAN_COUNT scan types identified ==="

      # Scan 1: Filesystem (d√©pendances PHP/JS)
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          trivy-config: ${{ inputs.trivy_config_file }}
          format: 'sarif'
          output: 'trivy-fs-results.sarif'


      - name: Run Trivy image scan
        if: ${{ steps.detect.outputs.docker_project == 'true' && inputs.image_name != '' }}
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'image'
          image-ref: '${{ inputs.image_name }}:${{ inputs.image_tag }}'
          trivy-config: ${{ inputs.trivy_config_file }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      # Upload des r√©sultats vers GitHub Security
      - name: Upload filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.detect.outputs.docker_project == 'true' && inputs.image_name != ''
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-image'

      - name: Analyze scan results
        id: summary
        run: |
          echo "=== Analyzing scan results ==="
          
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          MEDIUM_COUNT=0
          
          # Compter les vulns dans le JSON filesystem
          if [ -f "trivy-fs-results.json" ]; then
            FS_CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-fs-results.json 2>/dev/null || echo "0")
            FS_HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-fs-results.json 2>/dev/null || echo "0")
            FS_MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-fs-results.json 2>/dev/null || echo "0")
          
            CRITICAL_COUNT=$((CRITICAL_COUNT + FS_CRITICAL))
            HIGH_COUNT=$((HIGH_COUNT + FS_HIGH))
            MEDIUM_COUNT=$((MEDIUM_COUNT + FS_MEDIUM))
          
            echo "Filesystem: $FS_CRITICAL critical, $FS_HIGH high, $FS_MEDIUM medium"
          fi
          
          # Compter les vulns dans le JSON image
          if [ -f "trivy-image-results.json" ]; then
            IMG_CRITICAL=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' trivy-image-results.json 2>/dev/null || echo "0")
            IMG_HIGH=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' trivy-image-results.json 2>/dev/null || echo "0")
            IMG_MEDIUM=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "MEDIUM")] | length' trivy-image-results.json 2>/dev/null || echo "0")
          
            CRITICAL_COUNT=$((CRITICAL_COUNT + IMG_CRITICAL))
            HIGH_COUNT=$((HIGH_COUNT + IMG_HIGH))
            MEDIUM_COUNT=$((MEDIUM_COUNT + IMG_MEDIUM))
          
            echo "Image: $IMG_CRITICAL critical, $IMG_HIGH high, $IMG_MEDIUM medium"
          fi
          
          TOTAL_VULNS=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT))
          echo "TOTAL: $CRITICAL_COUNT critical, $HIGH_COUNT high, $MEDIUM_COUNT medium"
          
          # Outputs
          echo "results=üî¥ Critical: $CRITICAL_COUNT | üü† High: $HIGH_COUNT | üü° Medium: $MEDIUM_COUNT" >> $GITHUB_OUTPUT
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
          echo "total_count=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          
          # A-t-on des vuln√©rabilit√©s importantes ?
          if [ $CRITICAL_COUNT -gt 0 ] || [ $HIGH_COUNT -gt 0 ]; then
            echo "has_vulns=true" >> $GITHUB_OUTPUT
          else
            echo "has_vulns=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate summary report
        run: |
          echo "# Security Scan Report" > scan-report.md
          echo "" >> scan-report.md
          echo "## Scan Summary" >> scan-report.md
          echo "" >> scan-report.md

          echo "- üî¥ Critical: ${{ steps.summary.outputs.critical_count }}" >> scan-report.md
          echo "- üü† High: ${{ steps.summary.outputs.high_count }}" >> scan-report.md
          echo "- üü° Medium: ${{ steps.summary.outputs.medium_count }}" >> scan-report.md
          echo "- üìä Total: ${{ steps.summary.outputs.total_count }}" >> scan-report.md
          echo "" >> scan-report.md
          echo "üëâ [View full scan results in GitHub Security tab](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/security/code-scanning?query=ref%3A${GITHUB_REF_NAME})" >> scan-report.md
          
          echo "--- DEBUG: scan-report.md content ---"
          cat scan-report.md

      # Pr√©parer le message Discord
      - name: Prepare Discord notification
        id: discord-prep
        run: |
          # D√©terminer la couleur et l'emoji selon la s√©v√©rit√©
          CRITICAL_COUNT="${{ steps.summary.outputs.critical_count }}"
          HIGH_COUNT="${{ steps.summary.outputs.high_count }}"
          TOTAL_COUNT="${{ steps.summary.outputs.total_count }}"
          
          if [[ $CRITICAL_COUNT -gt 0 ]]; then
            COLOR="15158332"    # Rouge fonc√©
            EMOJI="üö®"
            STATUS="CRITICAL VULNERABILITIES DETECTED"
          elif [[ $HIGH_COUNT -gt 0 ]]; then
            COLOR="16753920"    # Orange
            EMOJI="‚ö†Ô∏è"
            STATUS="HIGH VULNERABILITIES DETECTED"
          elif [[ $TOTAL_COUNT -gt 0 ]]; then
            COLOR="16776960"    # Jaune
            EMOJI="üîç"
            STATUS="VULNERABILITIES DETECTED"
          else
            COLOR="65280"       # Vert
            EMOJI="‚úÖ"
            STATUS="SECURITY SCAN COMPLETED - NO ISSUES"
          fi
          
          echo "color=${COLOR}" >> $GITHUB_OUTPUT
          echo "emoji=${EMOJI}" >> $GITHUB_OUTPUT
          echo "status=${STATUS}" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ inputs.DISCORD_WEBHOOK_URL || secrets.DISCORD_WEBHOOK_URL }}

        run: |
          STATUS="‚úÖ Passed"
          if [ "${{ steps.summary.outputs.exit_code }}" != "0" ]; then
            STATUS="‚ùå Failed"
          fi
          PAYLOAD=$(jq -n \
          --arg title "üîí Security Scan $STATUS" \
          --arg content "## Scan Summary\n
          - üî¥ Critical: ${{ steps.summary.outputs.critical_count }}
          - üü† High: ${{ steps.summary.outputs.high_count }}
          - üü° Medium: ${{ steps.summary.outputs.medium_count }}
          - üìä Total: ${{ steps.summary.outputs.total_count }}
           üëâ [View full scan results in GitHub Security tab](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/security/code-scanning?query=ref%3A${GITHUB_REF_NAME})" \
          '{embeds: [{title: $title, description: $content}]}' )
        
            curl -H "Content-Type: application/json" \
                 -d "$PAYLOAD" \
                 $DISCORD_WEBHOOK

      # Upload des artifacts pour consultation
      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-reports
          path: |
            trivy-*-results.sarif
            scan-report.md
          retention-days: 30

      # Commentaire sur la PR (si c'est une PR)
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const reportContent = fs.readFileSync('scan-report.md', 'utf8');
            
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportContent
              });
            } catch (error) {
              console.log('Could not read or post scan report:', error);
            }