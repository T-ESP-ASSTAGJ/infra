# infra/.github/workflows/trivy-scan.yml

name: Trivy Security Pipeline Scan

on:
  workflow_call:
    inputs:
      image_name:
        required: false
        type: string
        description: 'Docker image name to scan'
      image_tag:
        required: false
        type: string
        default: ${{ github.sha }}
        description: 'Docker image tag'
      trivy_config_file:
        required: false
        type: string
        default: '.github/trivy.yaml'
        description: 'Path to Trivy config file'
      discord_webhook_url:
        required: false
        type: string
        description: 'Discord webhook URL for alerts'
    secrets:
      DISCORD_WEBHOOK_URL:
        required: false
        description: 'Discord webhook URL for alerts'
      GH_TOKEN:
        required: false
        description: 'GitHub token for registry access'
    outputs:
      scan_results:
        description: 'Summary of scan results'
        value: ${{ jobs.trivy-security-scan.outputs.results_summary }}
      vulnerabilities_found:
        description: 'Whether critical/high vulnerabilities were found'
        value: ${{ jobs.trivy-security-scan.outputs.has_vulnerabilities }}

jobs:
  trivy-security-scan:
    name: Trivy Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write  # Permission pour upload SARIF
      contents: read          # Permission pour checkout
      pull-requests: write    # Permission pour commenter les PRs
    outputs:
      results_summary: ${{ steps.summary.outputs.results }}
      has_vulnerabilities: ${{ steps.summary.outputs.has_vulns }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Trivy une seule fois avec cache
      - name: Setup Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          cache: true
          version: v0.64.1

      # Cr√©er config Trivy par d√©faut si elle n'existe pas
      - name: Create default Trivy config
        if: ${{ !contains(inputs.trivy_config_file, '/') }}
        run: |
          echo "Creating default Trivy configuration..."
          mkdir -p .github
          cat > .github/trivy.yaml << 'EOF'
          format: sarif
          severity:
            - CRITICAL
            - HIGH
            - MEDIUM
          vulnerability:
            ignore-unfixed: true
          secret:
            config: ''
          dependency:
            check: true
          EOF
          echo "Default Trivy config created at .github/trivy.yaml"

      # Authentification au registry pour les scans d'images
      - name: Login to GitHub Container Registry
        if: ${{ inputs.image_name != '' && contains(inputs.image_name, 'ghcr.io') }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN || github.token }}

      - name: Debug registry access
        if: ${{ inputs.image_name != '' }}
        run: |
          echo "üîç Testing registry access..."
          echo "Image: ${{ inputs.image_name }}:${{ inputs.image_tag }}"
          echo "Actor: ${{ github.actor }}"
          # Test d'acc√®s
          docker pull ${{ inputs.image_name }}:${{ inputs.image_tag }} && echo "‚úÖ Image accessible" || echo "‚ùå Image not accessible"

      # Support pour d'autres registries si n√©cessaire
      - name: Login to Docker Hub
        if: ${{ inputs.image_name != '' && !contains(inputs.image_name, 'ghcr.io') && !contains(inputs.image_name, '/') }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true

      # D√©tection automatique du type de projet
      - name: Detect project type and prepare scan info
        id: detect
        run: |
          echo "=== Detecting project structure ==="
          
          SCAN_TYPES=""
          SCAN_COUNT=0
          
          # D√©tection des langages/frameworks
          if [ -f "composer.json" ]; then
            echo "php_project=true" >> $GITHUB_OUTPUT
            echo "PHP project detected (composer.json found)"
            SCAN_TYPES="${SCAN_TYPES}üì¶ PHP Dependencies\n"
            SCAN_COUNT=$((SCAN_COUNT + 1))
          fi
          
          if [ -f "package.json" ]; then
            echo "js_project=true" >> $GITHUB_OUTPUT
            echo "JavaScript/Node project detected (package.json found)"
            SCAN_TYPES="${SCAN_TYPES}üì¶ Node.js Dependencies\n"
            SCAN_COUNT=$((SCAN_COUNT + 1))
          fi
          
          if [ -f "requirements.txt" ] || [ -f "pyproject.toml" ] || [ -f "Pipfile" ]; then
            echo "python_project=true" >> $GITHUB_OUTPUT
            echo "Python project detected"
            SCAN_TYPES="${SCAN_TYPES}üì¶ Python Dependencies\n"
            SCAN_COUNT=$((SCAN_COUNT + 1))
          fi
          
          if [ -f "Dockerfile" ]; then
            echo "docker_project=true" >> $GITHUB_OUTPUT
            echo "Docker project detected (Dockerfile found)"
            SCAN_TYPES="${SCAN_TYPES}üê≥ Docker Image\n"
            SCAN_COUNT=$((SCAN_COUNT + 1))
          fi
          
          # Toujours scanner le filesystem pour les secrets/config
          SCAN_TYPES="${SCAN_TYPES}üîç Filesystem Secrets\n"
          SCAN_COUNT=$((SCAN_COUNT + 1))
          
          # Toujours scanner le code source
          SCAN_TYPES="${SCAN_TYPES}üìÑ Source Code\n"
          SCAN_COUNT=$((SCAN_COUNT + 1))
          
          echo "scan_types<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SCAN_TYPES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          echo "scan_count=$SCAN_COUNT" >> $GITHUB_OUTPUT
          
          echo "=== Detection complete - $SCAN_COUNT scan types identified ==="

      # Scan 1: Filesystem (d√©pendances PHP/JS)
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'fs'
          scan-ref: '.'
          trivy-config: ${{ inputs.trivy_config_file }}
          format: 'sarif'
          output: 'trivy-fs-results.sarif'

      # Scan 2: Image Docker (si applicable)
      - name: Run Trivy image scan
        if: ${{ steps.detect.outputs.docker_project == 'true' && inputs.image_name != '' }}
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'image'
          image-ref: '${{ inputs.image_name }}:${{ inputs.image_tag }}'
          trivy-config: ${{ inputs.trivy_config_file }}
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      # Upload des r√©sultats vers GitHub Security
      - name: Upload filesystem scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'trivy-filesystem'

      - name: Upload image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.detect.outputs.docker_project == 'true' && inputs.image_name != ''
        with:
          sarif_file: 'trivy-image-results.sarif'
          category: 'trivy-image'

      - name: Generate human-readable report
        run: |
          echo "# Security Scan Report" > scan-report.md
          echo "" >> scan-report.md
          echo "## Scan Summary" >> scan-report.md
          echo "" >> scan-report.md
          
          # Filesystem scan summary
          echo "### Filesystem Scan" >> scan-report.md
          if [ -f "trivy-fs-results.sarif" ]; then
            trivy fs . --format table --severity CRITICAL,HIGH,MEDIUM >> scan-report.md 2>/dev/null || echo "No vulnerabilities found in filesystem" >> scan-report.md
          fi
          echo "" >> scan-report.md
          
          # Image scan summary (si applicable)
          if [ "${{ steps.detect.outputs.docker_project }}" == "true" ] && [ "${{ inputs.image_name }}" != "" ]; then
            echo "### Docker Image Scan" >> scan-report.md
            trivy image ${{ inputs.image_name }}:${{ inputs.image_tag }} --format table --severity CRITICAL,HIGH,MEDIUM >> scan-report.md 2>/dev/null || echo "No vulnerabilities found in image" >> scan-report.md
            echo "" >> scan-report.md
          fi

      # Analyse des r√©sultats pour alertes
      - name: Analyze scan results
        id: summary
        run: |
          echo "=== Analyzing scan results ==="
          
          CRITICAL_COUNT=0
          HIGH_COUNT=0
          MEDIUM_COUNT=0
          LOW_COUNT=0
          INFO_COUNT=0
          
          FS_CRITICAL=0
          FS_HIGH=0
          FS_MEDIUM=0
          IMG_CRITICAL=0
          IMG_HIGH=0
          IMG_MEDIUM=0
          
          # Compter les vuln√©rabilit√©s dans les fichiers SARIF
          if [ -f "trivy-fs-results.sarif" ]; then
            FS_CRITICAL=$(jq '[.runs[].results[] | select(.level == "error")] | length' trivy-fs-results.sarif 2>/dev/null || echo "0")
            FS_HIGH=$(jq '[.runs[].results[] | select(.level == "warning")] | length' trivy-fs-results.sarif 2>/dev/null || echo "0")
            FS_MEDIUM=$(jq '[.runs[].results[] | select(.level == "note")] | length' trivy-fs-results.sarif 2>/dev/null || echo "0")
            CRITICAL_COUNT=$((CRITICAL_COUNT + FS_CRITICAL))
            HIGH_COUNT=$((HIGH_COUNT + FS_HIGH))
            MEDIUM_COUNT=$((MEDIUM_COUNT + FS_MEDIUM))
            echo "Filesystem scan: $FS_CRITICAL critical, $FS_HIGH high, $FS_MEDIUM medium"
          fi
          
          if [ -f "trivy-image-results.sarif" ]; then
            IMG_CRITICAL=$(jq '[.runs[].results[] | select(.level == "error")] | length' trivy-image-results.sarif 2>/dev/null || echo "0")
            IMG_HIGH=$(jq '[.runs[].results[] | select(.level == "warning")] | length' trivy-image-results.sarif 2>/dev/null || echo "0")
            IMG_MEDIUM=$(jq '[.runs[].results[] | select(.level == "note")] | length' trivy-image-results.sarif 2>/dev/null || echo "0")
            CRITICAL_COUNT=$((CRITICAL_COUNT + IMG_CRITICAL))
            HIGH_COUNT=$((HIGH_COUNT + IMG_HIGH))
            MEDIUM_COUNT=$((MEDIUM_COUNT + IMG_MEDIUM))
            echo "Image scan: $IMG_CRITICAL critical, $IMG_HIGH high, $IMG_MEDIUM medium"
          fi
          
          TOTAL_VULNS=$((CRITICAL_COUNT + HIGH_COUNT + MEDIUM_COUNT))
          echo "Total vulnerabilities found: $TOTAL_VULNS (Critical: $CRITICAL_COUNT, High: $HIGH_COUNT, Medium: $MEDIUM_COUNT)"
          
          # Pr√©parer le r√©sum√© d√©taill√©
          SUMMARY="üî¥ Critical: $CRITICAL_COUNT | üü† High: $HIGH_COUNT | üü° Medium: $MEDIUM_COUNT"
          echo "results=$SUMMARY" >> $GITHUB_OUTPUT
          
          # Export des compteurs individuels pour Discord
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
          echo "total_count=$TOTAL_VULNS" >> $GITHUB_OUTPUT
          echo "fs_critical=$FS_CRITICAL" >> $GITHUB_OUTPUT
          echo "fs_high=$FS_HIGH" >> $GITHUB_OUTPUT
          echo "fs_medium=$FS_MEDIUM" >> $GITHUB_OUTPUT
          echo "img_critical=$IMG_CRITICAL" >> $GITHUB_OUTPUT
          echo "img_high=$IMG_HIGH" >> $GITHUB_OUTPUT
          echo "img_medium=$IMG_MEDIUM" >> $GITHUB_OUTPUT
          
          # D√©terminer s'il faut alerter
          if [ $CRITICAL_COUNT -gt 0 ] || [ $HIGH_COUNT -gt 0 ]; then
            echo "has_vulns=true" >> $GITHUB_OUTPUT
            echo "Vulnerabilities found - alerts will be sent"
          else
            echo "has_vulns=false" >> $GITHUB_OUTPUT
            echo "No critical/high vulnerabilities found"
          fi

      # Pr√©parer le message Discord
      - name: Prepare Discord notification
        id: discord-prep
        run: |
          # D√©terminer la couleur et l'emoji selon la s√©v√©rit√©
          CRITICAL_COUNT="${{ steps.summary.outputs.critical_count }}"
          HIGH_COUNT="${{ steps.summary.outputs.high_count }}"
          TOTAL_COUNT="${{ steps.summary.outputs.total_count }}"
          
          if [[ $CRITICAL_COUNT -gt 0 ]]; then
            COLOR="15158332"    # Rouge fonc√©
            EMOJI="üö®"
            STATUS="CRITICAL VULNERABILITIES DETECTED"
          elif [[ $HIGH_COUNT -gt 0 ]]; then
            COLOR="16753920"    # Orange
            EMOJI="‚ö†Ô∏è"
            STATUS="HIGH VULNERABILITIES DETECTED"
          elif [[ $TOTAL_COUNT -gt 0 ]]; then
            COLOR="16776960"    # Jaune
            EMOJI="üîç"
            STATUS="VULNERABILITIES DETECTED"
          else
            COLOR="65280"       # Vert
            EMOJI="‚úÖ"
            STATUS="SECURITY SCAN COMPLETED - NO ISSUES"
          fi
          
          echo "color=${COLOR}" >> $GITHUB_OUTPUT
          echo "emoji=${EMOJI}" >> $GITHUB_OUTPUT
          echo "status=${STATUS}" >> $GITHUB_OUTPUT

      # Notification Discord am√©lior√©e
      - name: Send Discord notification
        if: ${{ (github.event_name == 'schedule') && (inputs.discord_webhook_url != '' || inputs.DISCORD_WEBHOOK_URL != '') }}
        run: |
          # Utiliser le webhook fourni en input ou en secret
          WEBHOOK_URL="${{ inputs.discord_webhook_url }}"
          if [[ -z "$WEBHOOK_URL" ]]; then
            WEBHOOK_URL="${{ inputs.DISCORD_WEBHOOK_URL }}"
          fi
          
          # Pr√©parer les d√©tails des scans
          SCAN_DETAILS=""
          if [[ "${{ steps.summary.outputs.fs_critical }}" != "0" ]] || [[ "${{ steps.summary.outputs.fs_high }}" != "0" ]] || [[ "${{ steps.summary.outputs.fs_medium }}" != "0" ]]; then
            SCAN_DETAILS="${SCAN_DETAILS}üì¶ **Filesystem**: ${{ steps.summary.outputs.fs_critical }}üî¥ ${{ steps.summary.outputs.fs_high }}üü† ${{ steps.summary.outputs.fs_medium }}üü°\n"
          fi
          
          if [[ "${{ steps.detect.outputs.docker_project }}" == "true" ]] && [[ "${{ inputs.image_name }}" != "" ]]; then
            if [[ "${{ steps.summary.outputs.img_critical }}" != "0" ]] || [[ "${{ steps.summary.outputs.img_high }}" != "0" ]] || [[ "${{ steps.summary.outputs.img_medium }}" != "0" ]]; then
              SCAN_DETAILS="${SCAN_DETAILS}üê≥ **Docker Image**: ${{ steps.summary.outputs.img_critical }}üî¥ ${{ steps.summary.outputs.img_high }}üü† ${{ steps.summary.outputs.img_medium }}üü°\n"
            fi
          fi
          
          # Si pas de vuln√©rabilit√©s, montrer quand m√™me ce qui a √©t√© scann√©
          if [[ "${{ steps.summary.outputs.total_count }}" == "0" ]]; then
            SCAN_DETAILS="‚úÖ **All scans completed successfully**\n${{ steps.detect.outputs.scan_types }}"
          fi
          
          # Cr√©er timestamp
          TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)
          UNIX_TIMESTAMP=$(date +%s)
          
          # Construire le JSON avec jq pour √©viter les probl√®mes d'√©chappement
          jq -n \
            --arg title "${{ steps.discord-prep.outputs.emoji }} ${{ steps.discord-prep.outputs.status }}" \
            --arg description "${SCAN_DETAILS}" \
            --argjson color "${{ steps.discord-prep.outputs.color }}" \
            --arg repo "${{ github.repository }}" \
            --arg repo_url "https://github.com/${{ github.repository }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg commit_sha "${{ github.sha }}" \
            --arg short_sha "${{ github.sha }}" \
            --arg commit_url "https://github.com/${{ github.repository }}/commit/${{ github.sha }}" \
            --arg action_url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --arg critical "${{ steps.summary.outputs.critical_count }}" \
            --arg high "${{ steps.summary.outputs.high_count }}" \
            --arg medium "${{ steps.summary.outputs.medium_count }}" \
            --arg total "${{ steps.summary.outputs.total_count }}" \
            --arg scan_count "${{ steps.detect.outputs.scan_count }}" \
            --arg timestamp "${TIMESTAMP}" \
            --argjson unix_timestamp "${UNIX_TIMESTAMP}" \
            '{
              "embeds": [
                {
                  "title": $title,
                  "description": $description,
                  "color": $color,
                  "fields": [
                    {
                      "name": "üì¶ Repository",
                      "value": "[\($repo)](\($repo_url))",
                      "inline": true
                    },
                    {
                      "name": "üåø Branch",
                      "value": "`\($branch)`",
                      "inline": true
                    },
                    {
                      "name": "üîç Scans Performed",
                      "value": "\($scan_count) scan types",
                      "inline": true
                    },
                    {
                      "name": "üî¥ Critical",
                      "value": $critical,
                      "inline": true
                    },
                    {
                      "name": "üü† High",
                      "value": $high,
                      "inline": true
                    },
                    {
                      "name": "üü° Medium",
                      "value": $medium,
                      "inline": true
                    },
                    {
                      "name": "üìä Total Vulnerabilities",
                      "value": $total,
                      "inline": false
                    },
                    {
                      "name": "üîó Actions",
                      "value": "[View Scan Results](\($action_url)) ‚Ä¢ [View Commit](\($commit_url))",
                      "inline": false
                    }
                  ],
                  "timestamp": $timestamp,
                  "footer": {
                    "text": "Trivy Security Scanner ‚Ä¢ \($repo)",
                    "icon_url": "https://raw.githubusercontent.com/aquasecurity/trivy/main/docs/imgs/logo.png"
                  }
                }
              ]
            }' > discord_payload.json
          
          # Envoyer √† Discord
          HTTP_RESPONSE=$(curl -s -w "%{http_code}" \
                              -H "Content-Type: application/json" \
                              -d @discord_payload.json \
                              "${WEBHOOK_URL}")
          
          HTTP_CODE=${HTTP_RESPONSE: -3}
          
          if [[ $HTTP_CODE -ge 200 && $HTTP_CODE -lt 300 ]]; then
            echo "‚úÖ Discord security notification sent successfully! (HTTP $HTTP_CODE)"
          else
            echo "‚ùå Failed to send Discord notification. HTTP Code: $HTTP_CODE"
            echo "Response: ${HTTP_RESPONSE%???}"
            exit 1
          fi

      # Upload des artifacts pour consultation
      - name: Upload scan artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-security-reports
          path: |
            trivy-*-results.sarif
            scan-report.md
          retention-days: 30

      # Commentaire sur la PR (si c'est une PR)
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              const reportContent = fs.readFileSync('scan-report.md', 'utf8');
            
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: reportContent
              });
            } catch (error) {
              console.log('Could not read or post scan report:', error);
            }